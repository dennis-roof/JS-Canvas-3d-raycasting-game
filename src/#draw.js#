function Draw()
{
    this.halfViewPixelHeight;
    this.blockSize;
    this.lightArray = [];
    this.spriteArray = [];
    this.flash = "";
    this.flashDuration = 1;
    this.floorColor = "";
    this.objectiveNumber = 0;

    this.init = function initialize(fieldObject, raycasterObject)
    {
        this.halfViewPixelHeight = Math.round(raycasterObject.viewPixelHeight / 2);
        this.blockSize = fieldObject.blockSize;
    }

    this.clearScreen = function(context, width, height)
    {
        context.clearRect(0, 0, width, height);
        context.fillStyle = "rgb(0,0,0)";
        context.fillRect(0, 0, width, height);
    };

    this.drawFloor = function(viewContext, viewPixelWidth, halfViewPixelHeight)
    {
        viewContext.fillStyle = this.floorColor;
        viewContext.fillRect(0, halfViewPixelHeight, viewPixelWidth, halfViewPixelHeight);
    }

    this.drawText = function(viewContext, raycasterObject, text, color, backgroundColor)
    {
        var maxTextLength = 18;
        var length = text.length;
        var height = Math.ceil(length / maxTextLength);
        var index = 0;
        viewContext.fillStyle = backgroundColor;
        var topBottomOffset = Math.floor(raycasterObject.viewPixelHeight / 5);
        var leftRightOffset = Math.floor(raycasterObject.viewPixelWidth / 64);
        var lineHeight = Math.floor(raycasterObject.viewPixelHeight / 6);
        viewContext.fillRect(0, topBottomOffset, raycasterObject.viewPixelWidth, raycasterObject.viewPixelHeight-(topBottomOffset*2));
        viewContext.fillStyle = color;
        while (index < height) {
          var substring = text.substring(index*maxTextLength, (index+1)*maxTextLength);
          viewContext.fillStyle = color;

          viewContext.fillText(substring, leftRightOffset, index*lineHeight+(topBottomOffset*2));
          index++;
        }
    }

    this.drawWalls = function(viewContext, fieldObject, wallDistanceArray, viewPixelWidth, viewPixelHeight)
    {
        var sliceStep = 10;
        for (columnIndex = 0; columnIndex+sliceStep < viewPixelWidth; columnIndex+=sliceStep) {
            var wallsInColumn = wallDistanceArray[columnIndex];

            for (var wallIndex = 0; wallIndex < wallsInColumn.length; wallIndex+=1) {
                if (wallIndex != 0) {
                    var texturedWallIndex = wallIndex+1;
                    var floorVisible = true;
                } else {
                    var texturedWallIndex = 0;
                    var floorVisible = false;
                }

                var wallNumber = wallsInColumn[texturedWallIndex][1]['wall'];
                var wallHeight = fieldObject.fieldDetails[wallNumber]['height'];
                var wallTexture = fieldObject.fieldDetails[wallNumber]['texture'];

                var wallBottom = this.halfViewPixelHeight + wallsInColumn[texturedWallIndex][0];
                var wallTop = wallBottom - (wallsInColumn[texturedWallIndex][0] * 2 * wallHeight);
                if (floorVisible) {
                    var wallFloorBottom = this.halfViewPixelHeight + wallsInColumn[wallIndex][0];
                    var wallFloorTop = wallFloorBottom - (wallsInColumn[wallIndex][0] * 2 * wallHeight);
                } else {
                    var wallFloorBottom = null;
                    var wallFloorTop = null;
                }
                
                var sliceXmin = Math.abs(wallsInColumn[texturedWallIndex][1]['x'] % this.blockSize);
                var sliceYmin = Math.abs(wallsInColumn[texturedWallIndex][1]['y'] % this.blockSize);
                
                if (sliceXmin < 2 || sliceXmin > 62) {
                    var currentSliceMin = sliceYmin;
                } else {
                    var currentSliceMin = sliceXmin;
                }

                var sliceCoordinate = currentSliceMin;

                //myLogArray([columnIndex, sliceCoordinate, sliceSize]);
                viewContext.drawImage(wallTexture, sliceCoordinate, 0, /*sliceSize*/ 1, wall.height, columnIndex, wallTop, sliceStep, (wallBottom - wallTop));

                
                if (floorVisible) {
                    var gradient = viewContext.createLinearGradient(columnIndex, wallFloorTop, columnIndex+sliceStep, wallTop);
                    gradient.addColorStop(0, "rgb(30,30,30)");
                    gradient.addColorStop(1, "rgb(20,20,20)");
                    viewContext.fillStyle = gradient;
                    viewContext.fillRect(columnIndex, wallFloorTop, sliceStep, (wallTop - wallFloorTop));
                }
                

                
                var wallX = wallsInColumn[texturedWallIndex][1]['x'];
                var wallY = wallsInColumn[texturedWallIndex][1]['y'];
                var lightDistance = 100000;
                var lightRange = 0;
                for (var lightIndex in this.lightArray) {
                    var distance = this.getDistance(wallX, wallY, this.lightArray[lightIndex].getPixelX(), this.lightArray[lightIndex].getPixelY());
                    if (lightDistance > distance) {
                        lightDistance = distance;
                        lightRange = this.lightArray[lightIndex].range;
                    }
                }
               
                if (lightDistance > lightRange) {
                    var alpha = 1;
                } else if (lightDistance < (lightRange/10)) {
                    var alpha = 0;
                } else {
                    var alpha = 1 - ((lightRange/10) / lightDistance);
                }
                viewContext.beginPath();
                viewContext.fillStyle = "rgba(0,0,0, " + alpha + ")";
                viewContext.fillRect(columnIndex, wallTop, sliceStep, wallsInColumn[texturedWallIndex][0]*2*wallHeight);
                

                if (wallIndex != 0) {
                    wallIndex += 1;
                }
            }
        }
    };

    this.getDistance = function calculateDistance(x1, y1, x2, y2)
    {
        return Math.sqrt( Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2) );
    }

    this.drawSimpleLight = function drawSimpleLightDot(viewContext, cameraObject, raycasterObject)
    {
        for (var lightIndex in this.lightArray) {
            var lightX = this.lightArray[lightIndex].getPixelX();
            var lightY = this.lightArray[lightIndex].getPixelY();
            var visible = this.isSpriteWithinFieldOfVision(cameraObject, raycasterObject, lightX, lightY);

            if (visible) {
                var xPosition = this.findSpritePositionX(cameraObject, raycasterObject, this.lightArray[lightIndex]);
                var lightDistance = this.getDistance(lightX, lightY, cameraObject.getPixelX(), cameraObject.getPixelY());
                var lightSize = raycasterObject.normalizeDistance(lightDistance);
                var yPosition = raycasterObject.halfViewPixelHeight+(lightSize/2);

                var lightRange = this.lightArray[lightIndex].range;
                
                // to prevent the floor light to be drawn above the horizon...
                var topPositionY = yPosition-(lightRange/2);
                if (topPositionY < raycasterObject.halfViewPixelHeight) {
                    topPositionY = raycasterObject.halfViewPixelHeight;
                }
                
                //viewContext.save();
                //viewContext.scale(1, 0.75);
                gradObj = viewContext.createRadialGradient(xPosition, yPosition, 0, xPosition, yPosition, (lightRange/2));
                gradObj.addColorStop(0, "rgba(255,255,255, 0.25)");
                gradObj.addColorStop(1, "rgba(0,0,0, 0)");
                viewContext.fillStyle = gradObj;
                viewContext.rect(xPosition-(lightRange/2), topPositionY, lightRange, lightRange);
                viewContext.fill();
                //viewContext.restore();
            }
        }
    }

    this.activateSprites = function(viewContext, cameraObject, raycasterObject, fieldObject)
    {
        for (var spriteIndex in this.spriteArray) {
            this.spriteArray[spriteIndex].activate(viewContext, cameraObject, this, raycasterObject, fieldObject);
        }
    }

    this.regenerateHealth = function(cameraObject)
    {
        if (cameraObject.metadata["health"] > 0 && cameraObject.metadata["health"] < 100) {
            cameraObject.metadata["health"] += 0.2;
        }
    }

    this.shootSprite = function(cameraObject)
    {
        for (var spriteIndex in this.spriteArray) {
            if (this.spriteArray[spriteIndex].metadata["health"] != undefined) {
                if (this.spriteArray[spriteIndex].metadata["health"] > 0) {
                    var x = this.spriteArray[spriteIndex].getPixelX();
                    
                    var y = this.spriteArray[spriteIndex].getPixelY();
                    var angle = this.objectAngle(cameraObject, x, y);
                    if (angle < (cameraObject.rotationRadians+Math.PI/16) && angle > (cameraObject.rotationRadians-Math.PI/16)) {
                        this.spriteArray[spriteIndex].metadata["health"] -= cameraObject.metadata["shotDamage"];
                    }
                }
            }
        }
    }

    this.drawSprites = function drawSpritesOnScreen(viewContext, cameraObject, raycasterObject, wallDistanceArray)
    {
        spriteObjectArray = this.orderSprites(cameraObject, this.spriteArray);
        for (var spriteIndex in spriteObjectArray)
        {
            var spriteX = spriteObjectArray[spriteIndex].getPixelX();
            var spriteY = spriteObjectArray[spriteIndex].getPixelY();
            var visible = this.isSpriteWithinFieldOfVision(cameraObject, raycasterObject, spriteX, spriteY);

            var health = spriteObjectArray[spriteIndex].metadata["health"];
            
            if (visible && (health == undefined || health > 0)) {
                var xPosition = this.findSpritePositionX(cameraObject, raycasterObject, spriteObjectArray[spriteIndex]);
                var spriteDistance = this.getDistance(spriteX, spriteY, cameraObject.getPixelX(), cameraObject.getPixelY()); // round ?
                var spriteSize = raycasterObject.normalizeDistance(spriteDistance); // round ?
                spriteDistance = Math.round(spriteDistance);
                spriteSize = Math.round(spriteSize*2);

                offsetLeft = this.getLeftCrop(raycasterObject, wallDistanceArray, xPosition, spriteSize, spriteDistance);
                offsetRight = this.getRightCrop(raycasterObject, wallDistanceArray, xPosition, spriteSize, spriteDistance);
                
                if (spriteSize - offsetLeft - offsetRight > 0) {
                    this.drawSprite(viewContext, raycasterObject, xPosition, spriteSize, spriteObjectArray[spriteIndex].image, offsetLeft, offsetRight);
                }
            }
        }
    }

    this.orderSprites = function(cameraObject, sprites)
    {
        orderedSprites = [];
        
        for (i in sprites) {
            x = sprites[i].getPixelX();
            y = sprites[i].getPixelY();
            distance = this.getDistance(x, y, cameraObject.getPixelX(), cameraObject.getPixelY());
            orderedSprites.push([distance, sprites[i]]);
        }
        
        orderedSprites.sort(this.sortArray);
        
        newSprites = [];
        for (j in orderedSprites) {
            newSprites.unshift(orderedSprites[j][1]);
        }

        return newSprites;
    }

    this.sortArray = function(a, b)
    {
        var difference = a[0]-b[0];
        if (difference != 0) {
            return Math.abs(difference)/difference;
        } else  {
            return 0;
        }
    }

    this.drawSprite = function drawSpriteOnScreen(viewContext, raycasterObject, xSpritePosition, spriteSize, spriteImage, spriteOffsetLeft, spriteOffsetRight)
    {
        if (spriteImage == null) {
            return false;
        }

        var imageWidth = spriteImage.width;
        var imageHeight = spriteImage.height;
        var imageCanvasSize = spriteSize - spriteOffsetLeft - spriteOffsetRight;
        var imageWidthFraction = Math.round(imageWidth / (spriteSize / imageCanvasSize));
        var imageLeftFractionStart = Math.round(imageWidth - (imageWidth / (spriteSize / (spriteSize - spriteOffsetLeft))));
        var halfSize = spriteSize / 2;
        var yPosition = raycasterObject.halfViewPixelHeight - halfSize;
        var xPosition = xSpritePosition - halfSize;
        var xPositionOffset = xPosition + spriteOffsetLeft;
        viewContext.beginPath();
        viewContext.drawImage(spriteImage, imageLeftFractionStart, 0, imageWidthFraction, imageHeight, xPositionOffset, yPosition, imageCanvasSize, spriteSize);
        viewContext.closePath();
   }

    this.getLeftCrop = function findLeftCrop(raycasterObject, wallDistanceArray, xPosition, width, distance)
    {
        offsetCount = 0;
        index = Math.floor(xPosition - (width / 2));
        if (index < 0){
            offsetCount = Math.abs(index);
            index = 0;
        }

        while (index < raycasterObject.viewPixelWidth && wallDistanceArray[index][0][1]['realDistance'] < distance && offsetCount < width) {
            offsetCount++;
            index++;
        }
        return offsetCount;
    }

    this.getRightCrop = function findRightCrop(raycasterObject, wallDistanceArray, xPosition, width, distance)
    {
        offsetCount = 0;
        index = Math.floor(xPosition + (width / 2));
        if (index > raycasterObject.viewPixelWidth){
            offsetCount = index - raycasterObject.viewPixelWidth;
            index = index - offsetCount - 1;
        }
        while (index > 0 && wallDistanceArray[index][0][1]['realDistance'] < distance && offsetCount < width) {
            offsetCount++;
            index--;
        }
        return offsetCount;
    }

    this.objectAngle = function findObjectAngle(cameraObject, x, y)
    {
        if (x == cameraObject.getPixelX()) {
            if (y > cameraObject.getPixelY()) {
                return 0.5 * Math.PI;
            } else if (y < cameraObject.getPixelY()) {
                return 1.5 * Math.PI;
            }
        }
        if (y == cameraObject.getPixelY()) {
            if (x > cameraObject.getPixelX()) {
                return 0;
            } else if (x < cameraObject.getPixelX()) {
                return Math.PI;
            }
        }
        var realX = x - cameraObject.getPixelX();
        var realY = y - cameraObject.getPixelY();
        var tangent = realY / realX; 
        
        var a = (Math.atan( (tangent) ) + (2*Math.PI) ) % (2*Math.PI);
        var b = (a + Math.PI ) % (2*Math.PI);


        if (realY > 0) {
            if (a <= Math.PI) {
                return a;
            } else {
                return b;
            }
        } else {
            if (a >= Math.PI) {
                return a;
            } else {
                return b;
            }
        }
    }
    
    this.findRelativeObjectAngle = function relativeObjectAngle(cameraObject, raycasterObject, x, y)
    {
        var minimumObjectAngle = cameraObject.rotationRadians - raycasterObject.halfFieldOfVisionRadians;
        if (minimumObjectAngle < 0) {
            minimumObjectAngle += 2*Math.PI;
        }
       
        var normalizedObjectAngle = (this.objectAngle(cameraObject, x, y) - minimumObjectAngle + (2*Math.PI)) % (2*Math.PI);

        return normalizedObjectAngle;
    }

    this.isSpriteWithinFieldOfVision = function objectWithinFov(cameraObject, raycasterObject, x, y)
    {
        var relativeSpriteAngle = this.findRelativeObjectAngle(cameraObject, raycasterObject, x, y);
        
        //var fieldOfVisionBorder = 1.0*Math.PI;
        if (relativeSpriteAngle <= raycasterObject.fieldOfVisionRadians/*+fieldOfVisionBorder*/) {
            return true;
        } else {
            return false;
        }
    }

    this.findSpritePositionX = function spritePositionX(cameraObject, raycasterObject, spriteObject)
    {
        var relativeSpriteAnglePosition = this.findRelativeObjectAngle(cameraObject, raycasterObject, spriteObject.getPixelX(), spriteObject.getPixelY());
        
        //myLogArray(['cameraRotation', cameraObject.rotationRadians, 'fovRadians', raycasterObject.halfFieldOfVisionRadians, 'minRotation', minRotation, 'relativeObjectAngle', relativeObjectAngle]);
        var xSpritePosition = relativeSpriteAnglePosition / raycasterObject.angleStep;

        return xSpritePosition;
    }

    this.findSpriteSize = function spriteSize(cameraObject, raycasterObject, spriteObject)
    {
        return normalizedSpriteDistance;
    }

    this.activateFlash = function(viewContext, raycasterObject)
    {
        if (this.flash != "") {
            viewContext.fillStyle = this.flash;
            viewContext.fillRect(0, 0, raycasterObject.viewPixelWidth, raycasterObject.viewPixelHeight);
            if (this.flashDuration == 1) {
                this.flash = "";
            } else {
                this.flashDuration -= 1;
            }
        }
    }

    this.drawInterface = function(viewContext, cameraObject, raycasterObject)
    {
        var fontsize = Math.floor(raycasterObject.viewPixelWidth/10);
        viewContext.font = "bold " + fontsize + "px sans-serif";

        // draw health status as red glow
        var healthAlpha = 1 - (cameraObject.metadata["health"] / 100);
        viewContext.fillStyle = 'rgba(255,0,0,' + healthAlpha + ')';
        viewContext.fillRect(0, 0, raycasterObject.viewPixelWidth, raycasterObject.viewPixelHeight);
        
        //viewContext.fillText(cameraObject.metadata["health"], 70, 58);

        // draw crosshair
        var xScreenCenter = Math.round(raycasterObject.halfViewPixelWidth);
        var yScreenCenter = Math.round(raycasterObject.halfViewPixelHeight);
        viewContext.strokeStyle = 'rgb(230, 230, 230)';
        viewContext.beginPath();
        viewContext.moveTo(xScreenCenter-10, yScreenCenter);
        viewContext.lineTo(xScreenCenter+10, yScreenCenter);
        viewContext.moveTo(xScreenCenter, yScreenCenter-10);
        viewContext.lineTo(xScreenCenter, yScreenCenter+10);
        viewContext.stroke();

        // draw inventory
        var itemSize = Math.floor(raycasterObject.viewPixelWidth / 6);
        var itemPositionX = Math.floor(raycasterObject.viewPixelWidth / 6 * 5);
        var itemPositionY = 0;
        for (var inventoryIndex in cameraObject.inventory) {
            var keyId = cameraObject.inventory[inventoryIndex];
            for (var spriteIndex in this.spriteArray) {
                var spriteKeyId = this.spriteArray[spriteIndex].metadata['keyId'];
                if (spriteKeyId != undefined && spriteKeyId == keyId) {
                    viewContext.drawImage(this.spriteArray[spriteIndex].inventoryImage, itemPositionX, itemPositionY, itemSize, itemSize);
                    itemPositionY += itemSize;
                }
            }
        }

        // draw objective compass
        var objective = null;
        for (var spriteIndex in this.spriteArray) {
            var spriteObjectiveNumber = this.spriteArray[spriteIndex].metadata['objectiveNumber'];
            if (spriteObjectiveNumber != undefined && this.objectiveNumber+1 == spriteObjectiveNumber) {
                objective = this.spriteArray[spriteIndex];
                break;
            }
        }
        var objectiveAngle = this.findRelativeObjectAngle(cameraObject, raycasterObject, objective.getPixelX(), objective.getPixelY());
        var definiteAngle = cameraObject.rotationRadians - (Math.PI / 2) - objectiveAngle;
        if (definiteAngle < 0) {
            definiteAngle += Math.PI * 2;
        }
        viewContext.save();
        viewContext.translate(raycasterObject.viewPixelWidth/2, 30);
        viewContext.rotate(objectiveAngle);
        viewContext.drawImage($('arrow'), -20, -20, 40, 40);
        viewContext.restore();
    }

    this.drawMinimap = function(viewContext, minimapContext, fieldObject, cameraObject)
    {
        var scale = 8;

        minimapContext.clearRect(0, 0, 320, 240);
        minimapContext.save();
        minimapContext.translate((320/2)-Math.floor(cameraObject.getPixelX()/scale)-8, (240/2)-Math.floor(cameraObject.getPixelY()/scale)-8);
        //minimapContext.rotate(cameraObject.rotationRadians);
        
        var x = 0;
        var y = 0;
        var scaledBlocksize = this.blockSize / scale;
        for (var row in fieldObject.fieldMap) {
            x = 0;
            for (var column in fieldObject.fieldMap[row]) {
                var block = fieldObject.fieldMap[row][column];
                if (block > 0) {
                    minimapContext.fillStyle = "rgb(50,50,50)";
                    minimapContext.fillRect(x, y, scaledBlocksize, scaledBlocksize);
                }

                x += scaledBlocksize;
            }
            y += scaledBlocksize;
        }
        
        minimapContext.restore();

        minimapContext.fillStyle = "rgb(0,0,110)";
        minimapContext.fillRect(320/2-2, 240/2-2, 4, 4);

        var trueRotation = (Math.PI*2) - (cameraObject.rotationRadians + (Math.PI/2));
        if (trueRotation > 2*Math.PI) {
            trueRotation -= 2*Math.PI;
        }
        viewContext.save();
        viewContext.translate(100, 380);
        viewContext.rotate(trueRotation);
        viewContext.fillStyle = "rgba(255,255,255,0.5)";
        viewContext.fillRect(-50, -50, 100, 100);
        viewContext.drawImage($('minimap'), -50, -50, 100, 100);
        viewContext.restore();
    };

}
